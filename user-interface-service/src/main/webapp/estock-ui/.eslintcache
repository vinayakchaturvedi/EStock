[{"/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/index.js":"1","/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/HomePage.js":"2","/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/SignIn.js":"3","/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/Dashboard.js":"4","/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/Welcome.js":"5","/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/SignUp.js":"6","/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/ExtendedStockView.js":"7","/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/BuyStock.js":"8","/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/GenerateGraph.js":"9","/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/GenerateView.js":"10","/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/App.js":"11","/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/Error404.js":"12"},{"size":145,"mtime":1614954389916,"results":"13","hashOfConfig":"14"},{"size":222,"mtime":1614954389892,"results":"15","hashOfConfig":"14"},{"size":3355,"mtime":1617107366157,"results":"16","hashOfConfig":"14"},{"size":2552,"mtime":1617107391054,"results":"17","hashOfConfig":"14"},{"size":1664,"mtime":1617098825979,"results":"18","hashOfConfig":"14"},{"size":4920,"mtime":1617107367533,"results":"19","hashOfConfig":"14"},{"size":13624,"mtime":1617107367533,"results":"20","hashOfConfig":"14"},{"size":8538,"mtime":1617112034035,"results":"21","hashOfConfig":"14"},{"size":4050,"mtime":1617098825979,"results":"22","hashOfConfig":"14"},{"size":4578,"mtime":1617107367533,"results":"23","hashOfConfig":"14"},{"size":1386,"mtime":1617107366149,"results":"24","hashOfConfig":"14"},{"size":848,"mtime":1617107366149,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"etwjes",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/index.js",[],["53","54"],"/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/HomePage.js",[],"/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/SignIn.js",[],"/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/Dashboard.js",[],"/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/Welcome.js",[],"/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/SignUp.js",[],"/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/ExtendedStockView.js",["55"],"import React, {Component} from \"react\";\nimport {Chart} from \"react-chartjs-2\";\n\nclass ExtendedStockView extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            stockName: this.props.location.stockName,\n            isLoading: false,\n            numberOfDays: 30,\n            companyReportQueryType: \"netIncome\",\n            companyOverview: {},\n            currentStockPrice: 0,\n            prevStockPrice: 0,\n            priceDiff: 0,\n            stockTrendChart: undefined,\n            companyReportChart: undefined\n        }\n        this.handleClickStockTrend = this.handleClickStockTrend.bind(this)\n        this.handleClickCompanyReport = this.handleClickCompanyReport.bind(this)\n        this.showChart = this.showChart.bind(this)\n        this.showStockChart = this.showStockChart.bind(this)\n        this.showComparyReportChart = this.showComparyReportChart.bind(this)\n        this.handleClick = this.handleClick.bind(this)\n    }\n\n    async componentDidMount() {\n        this.setState({\n            isLoading: true\n        })\n\n        if (localStorage.getItem('prevStockPrice') === null) {\n            this.setState({\n                prevStockPrice: this.state.currentStockPrice\n            })\n        } else {\n            this.setState({\n                prevStockPrice: JSON.parse(localStorage.getItem('prevStockPrice'))\n            })\n        }\n\n        if (this.state.stockName === undefined) {\n            this.setState({\n                stockName: JSON.parse(localStorage.getItem('stockName'))\n            }, () => this.showChart())\n        } else {\n            localStorage.setItem('stockName', JSON.stringify(this.state.stockName));\n            this.showChart()\n        }\n\n    }\n\n    async showChart() {\n\n        this.setState({\n            companyOverview: await require('../data_and_config/Company_Overview/' + this.state.stockName + '.json'),\n            isLoading: false\n        })\n\n        this.setState({\n            currentStockPrice: await require('../data_and_config/CurrentDay/' + this.state.stockName + '.json').c,\n            isLoading: false\n        })\n\n        this.showStockChart();\n        this.showComparyReportChart();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.state.currentStockPrice !== this.state.prevStockPrice) {\n            localStorage.setItem('prevStockPrice', JSON.stringify(this.state.currentStockPrice));\n        }\n    }\n\n    async showComparyReportChart() {\n        this.setState({\n                companyReportApiOutput: await require('../data_and_config/Income_Statement/' + this.state.stockName + '.json'),\n                isLoading: false\n            }\n        )\n\n        console.log(this.state.companyReportApiOutput)\n        let annualReports = this.state.companyReportApiOutput.annualReports;\n        let label = []\n        let yAxisData = []\n        for (let index in annualReports) {\n            label.push(annualReports[index].fiscalDateEnding)\n            yAxisData.push(annualReports[index][this.state.companyReportQueryType])\n        }\n        yAxisData.reverse();\n\n        let ctx = document.getElementById(this.state.stockName + \"company_report\").getContext('2d');\n        let oldChart = this.state.companyReportChart;\n        if (oldChart !== undefined) {\n            oldChart.destroy()\n        }\n\n        let currChart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: label,\n                datasets: [\n                    {\n                        label: this.state.companyReportQueryType,\n                        borderColor: 'rgb(226,122,17)',\n                        data: yAxisData\n                    }\n                ],\n            },\n            options: {\n                legend: {\n                    labels: {\n                        fontColor: 'rgb(255,255,255)',\n                    }\n                },\n                title: {\n                    display: true,\n                    fontColor: 'rgb(255,255,255)',\n                    fontSize: 26,\n                    text: this.state.companyOverview.Name + \" Company Report\",\n                },\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            fontColor: 'rgb(255,255,255)',\n                            fontSize: 16,\n                        },\n                    }],\n                    xAxes: [{\n                        ticks: {\n                            fontColor: 'rgb(255,255,255)',\n                            fontSize: 16,\n                        },\n                    }]\n                }\n\n            }\n        });\n\n        this.setState({\n            companyReportChart: currChart\n        })\n\n    }\n\n    async showStockChart() {\n        this.setState({\n                stockPriceApiOutput: await require('../data_and_config/TS_Daily/' + this.state.stockName + '.json'),\n                isLoading: false\n            }\n        )\n\n        Date.prototype.yyyymmdd = function () {\n            let mm = this.getMonth() + 1; // getMonth() is zero-based\n            let dd = this.getDate();\n\n            return [this.getFullYear(), '-',\n                (mm > 9 ? '' : '0') + mm, '-',\n                (dd > 9 ? '' : '0') + dd\n            ].join('');\n        };\n\n        let numberOfDays = this.state.numberOfDays\n        let open = []\n        let close = []\n        let label = []\n        let startDate = Date.parse(this.state.stockPriceApiOutput[\"Meta Data\"][\"3. Last Refreshed\"]) - numberOfDays * 86400000\n\n        for (let i = 0; i <= numberOfDays; i++) {\n            let curr = new Date(startDate + (i * 86400000))\n            let timeSeries = this.state.stockPriceApiOutput[\"Time Series (Daily)\"]\n            if (timeSeries.hasOwnProperty(curr.yyyymmdd())) {\n                open.push(timeSeries[curr.yyyymmdd()][\"1. open\"])\n                close.push(timeSeries[curr.yyyymmdd()][\"4. close\"])\n                label.push(curr.yyyymmdd())\n            }\n        }\n\n        let ctx = document.getElementById(this.state.stockName + \"stock_trend\").getContext('2d');\n        let oldChart = this.state.stockTrendChart;\n        if (oldChart !== undefined) {\n            oldChart.destroy()\n        }\n\n        let currChart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: label,\n                datasets: [\n                    {\n                        label: \"OPEN\",\n                        borderColor: 'rgb(226,122,17)',\n                        data: open\n                    },\n                    {\n                        label: \"CLOSE\",\n                        borderColor: 'rgb(237,9,59)',\n                        data: close\n                    }\n                ],\n            },\n            options: {\n                legend: {\n                    labels: {\n                        fontColor: 'rgb(255,255,255)',\n                    }\n                },\n                title: {\n                    display: true,\n                    fontColor: 'rgb(255,255,255)',\n                    fontSize: 26,\n                    text: this.state.companyOverview.Name + \" Stock Trend\",\n                },\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            fontColor: 'rgb(255,255,255)',\n                            fontSize: 16,\n                        },\n                    }],\n                    xAxes: [{\n                        ticks: {\n                            fontColor: 'rgb(255,255,255)',\n                            fontSize: 16,\n                        },\n                    }]\n                }\n\n            }\n        });\n\n\n        this.setState({\n            stockTrendChart: currChart\n        })\n    }\n\n    handleClick(event) {\n        console.log(\"Clicked\")\n    }\n\n    handleClickStockTrend(event) {\n        const id = event.target.id\n        this.setState({\n            numberOfDays: id\n        }, () => this.showStockChart())\n    }\n\n    handleClickCompanyReport(event) {\n        const id = event.target.id\n        this.setState({\n            companyReportQueryType: id\n        }, () => this.showComparyReportChart())\n    }\n\n    render() {\n        return (\n            <div className=\"ExtendedStockView\">\n                <div className=\"container\">\n                    <div className=\"item\">\n                        <div className=\"daysQuery\">\n                            <div className=\"queryType\" onClick={this.handleClickStockTrend} id=\"5\">5 Days</div>\n                            <div className=\"queryType\" onClick={this.handleClickStockTrend} id=\"10\">10 Days</div>\n                            <div className=\"queryType\" onClick={this.handleClickStockTrend} id=\"30\">1 Month</div>\n                            <div className=\"queryType\" onClick={this.handleClickStockTrend} id=\"180\">6 Months</div>\n                            <div className=\"queryType\" onClick={this.handleClickStockTrend} id=\"365\">1 Year</div>\n                            <div className=\"queryType\" onClick={this.handleClickStockTrend} id=\"1825\">5 Years</div>\n                        </div>\n                        <div style={{display: this.state.isLoading ? \"none\" : \"block\"}}>\n                            <canvas\n                                id={this.state.stockName + \"stock_trend\"}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"item\">\n                        <div className=\"daysQuery\">\n                            <div className=\"queryType\" onClick={this.handleClickCompanyReport} id=\"totalRevenue\">Total\n                                Revenue\n                            </div>\n                            <div className=\"queryType\" onClick={this.handleClickCompanyReport} id=\"grossProfit\">Gross\n                                Profit\n                            </div>\n                            <div className=\"queryType\" onClick={this.handleClickCompanyReport} id=\"netIncome\">Net\n                                Income\n                            </div>\n                        </div>\n                        <div style={{display: this.state.isLoading ? \"none\" : \"block\"}}>\n                            <canvas\n                                id={this.state.stockName + \"company_report\"}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"item\">\n                        <div>\n                            <h5 className=\"companyDetails\">Name: </h5>\n                            <p className=\"companyDetails\">{this.state.companyOverview.Name}</p>\n                        </div>\n                        <div>\n                            <h5 className=\"companyDetails\">Asset Type: </h5>\n                            <p className=\"companyDetails\">{this.state.companyOverview.AssetType}</p>\n                        </div>\n                        <div>\n                            <h5 className=\"companyDetails\">Stock Exchange: </h5>\n                            <p className=\"companyDetails\">{this.state.companyOverview.Exchange}</p>\n                        </div>\n                        <div>\n                            <h5 className=\"companyDetails\">Currency: </h5>\n                            <p className=\"companyDetails\">{this.state.companyOverview.Currency}</p>\n                        </div>\n                        <div>\n                            <h5 className=\"companyDetails\">Industry: </h5>\n                            <p className=\"companyDetails\">{this.state.companyOverview.Industry}</p>\n                        </div>\n                        <div>\n                            <h5 className=\"companyDetails\">Country: </h5>\n                            <p className=\"companyDetails\">{this.state.companyOverview.Country}</p>\n                        </div>\n                        <div>\n                            <h5 className=\"companyDetails\">Current Stock Price: </h5>\n                            <p\n                                className=\"companyDetails\"\n                                style={{color: this.state.prevStockPrice === 0 || this.state.currentStockPrice - this.state.prevStockPrice > 0 ? \"green\" : \"red\"}}\n                            >\n                                {this.state.currentStockPrice}\n                            </p>\n                            <p\n                                className=\"companyDetails\"\n                                style={{\n                                    display: this.state.currentStockPrice - this.state.prevStockPrice > 0 ? \"inline-block\" : \"none\",\n                                    fontSize: \"45px\",\n                                    color: \"green\"\n                                }}\n                            >\n                                &nbsp; &nbsp; &uarr;\n                            </p>\n                            <p\n                                className=\"companyDetails\"\n                                style={{\n                                    display: this.state.currentStockPrice - this.state.prevStockPrice < 0 ? \"inline-block\" : \"none\",\n                                    fontSize: \"45px\",\n                                    color: \"red\"\n                                }}\n                            >\n                                &nbsp; &nbsp; &darr;\n                            </p>\n                        </div>\n                        <button onClick={this.handleClick} className=\"buyStock\">Buy Stock</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ExtendedStockView","/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/BuyStock.js",["56","57","58"],"/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/GenerateGraph.js",["59"],"import React, {Component} from \"react\";\nimport {Chart} from \"react-chartjs-2\";\nimport GenerateView from \"./GenerateView\";\n\nclass GenerateGraph extends Component {\n\n    constructor(props) {\n        super();\n        this.state = {\n            stockName: props.name,\n            date: \"\",\n            isLoading: false,\n            apiOutput: {},\n        }\n\n        this.showChart = this.showChart.bind(this)\n    }\n\n\n    async componentDidMount() {\n        this.setState({\n            isLoading: true\n        })\n\n        this.setState({\n                apiOutput: await require('../data_and_config/TS_Intraday/' + this.state.stockName + '.json'),\n                isLoading: false\n            }\n        )\n\n        Date.prototype.dateTimeFormat = function () {\n            let mm = this.getMonth() + 1; // getMonth() is zero-based\n            let dd = this.getDate();\n            let hh = this.getHours();\n            let min = this.getMinutes();\n\n            return [this.getFullYear(), '-',\n                (mm > 9 ? '' : '0') + mm, '-',\n                (dd > 9 ? '' : '0') + dd, ' ',\n                hh, ':', (min > 9 ? '' : '0') + min, ':00'\n            ].join('');\n        };\n\n        this.showChart();\n    }\n\n    showChart() {\n        let open = []\n        let label = []\n        let startTime = Date.parse(this.state.apiOutput[\"Meta Data\"][\"3. Last Refreshed\"]) - 36000000\n        let endTime = Date.parse(this.state.apiOutput[\"Meta Data\"][\"3. Last Refreshed\"])\n        let iterator = startTime;\n        this.setState({\n            date: new Date(endTime).dateTimeFormat().substr(0, 10)\n        })\n\n        while (iterator !== endTime) {\n            let curr = new Date(iterator)\n            let timeSeries = this.state.apiOutput[\"Time Series (5min)\"]\n            if (timeSeries.hasOwnProperty(curr.dateTimeFormat())) {\n                open.push(timeSeries[curr.dateTimeFormat()][\"1. open\"])\n                label.push(curr.dateTimeFormat().substr(11, 5))\n            }\n            iterator += 300000\n        }\n\n        let ctx = document.getElementById(this.state.stockName).getContext('2d');\n        new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: label,\n                datasets: [\n                    {\n                        label: \"Stock Price\",\n                        borderColor: 'rgb(17,135,226)',\n                        data: open\n                    }\n                ],\n            },\n            options: {\n                legend: {\n                    labels: {\n                        fontColor: 'rgb(255,255,255)',\n                    }\n                },\n                title: {\n                    display: true,\n                    fontColor: 'rgb(255,255,255)',\n                    fontSize: 20,\n                    text: this.state.date,\n                },\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            fontColor: 'rgb(255,255,255)',\n                            fontSize: 16,\n                        },\n                    }],\n                    xAxes: [{\n                        ticks: {\n                            fontColor: 'rgb(255,255,255)',\n                            fontSize: 16,\n                        },\n                    }]\n                }\n\n            }\n        })\n    }\n\n    render() {\n        return (\n            <div style={{display: this.state.isLoading ? \"none\" : \"block\"}} className=\"GenerateView\">\n                <div className=\"container\">\n                    <div className=\"item graph\">\n                        <canvas\n                            id={this.state.stockName}\n                            height=\"180px\"\n                        />\n                    </div>\n                    <div className=\"item\">\n                        &nbsp;\n                        <GenerateView\n                            name={this.state.stockName}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default GenerateGraph","/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/GenerateView.js",[],"/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/App.js",[],"/home/shubhi/Desktop/PE/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/Error404.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":154,"column":9,"nodeType":"66","messageId":"67","endLine":162,"endColumn":10},{"ruleId":"68","severity":1,"message":"69","line":2,"column":8,"nodeType":"70","messageId":"71","endLine":2,"endColumn":11},{"ruleId":"72","severity":1,"message":"73","line":44,"column":18,"nodeType":"74","messageId":"67","endLine":44,"endColumn":20},{"ruleId":"72","severity":1,"message":"73","line":79,"column":18,"nodeType":"74","messageId":"67","endLine":79,"endColumn":20},{"ruleId":"64","severity":1,"message":"65","line":31,"column":9,"nodeType":"66","messageId":"67","endLine":42,"endColumn":10},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-extend-native","Date prototype is read only, properties should not be added.","AssignmentExpression","unexpected","no-unused-vars","'Pdf' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","no-global-assign","no-unsafe-negation"]