[{"/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/index.js":"1","/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/App.js":"2","/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/Welcome.js":"3","/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/HomePage.js":"4","/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/Error404.js":"5","/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/SignIn.js":"6","/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/Dashboard.js":"7","/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/SignUp.js":"8","/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/BuyStock.js":"9","/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/ExtendedStockView.js":"10","/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/GenerateGraph.js":"11","/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/GenerateView.js":"12","/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/GeneratePDF.js":"13"},{"size":145,"mtime":1612527954786,"results":"14","hashOfConfig":"15"},{"size":1537,"mtime":1617900158134,"results":"16","hashOfConfig":"15"},{"size":1670,"mtime":1617900158138,"results":"17","hashOfConfig":"15"},{"size":222,"mtime":1612527954766,"results":"18","hashOfConfig":"15"},{"size":848,"mtime":1617110845405,"results":"19","hashOfConfig":"15"},{"size":3354,"mtime":1617900158138,"results":"20","hashOfConfig":"15"},{"size":2552,"mtime":1617900158138,"results":"21","hashOfConfig":"15"},{"size":4920,"mtime":1617900158138,"results":"22","hashOfConfig":"15"},{"size":8726,"mtime":1617900158134,"results":"23","hashOfConfig":"15"},{"size":13850,"mtime":1617900158138,"results":"24","hashOfConfig":"15"},{"size":4050,"mtime":1617110845405,"results":"25","hashOfConfig":"15"},{"size":4578,"mtime":1617112257372,"results":"26","hashOfConfig":"15"},{"size":4375,"mtime":1617900158138,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"lw6ug",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},"/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/index.js",[],"/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/App.js",[],"/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/Welcome.js",[],["58","59"],"/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/HomePage.js",[],"/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/Error404.js",[],"/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/SignIn.js",[],"/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/Dashboard.js",[],"/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/SignUp.js",[],"/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/BuyStock.js",["60","61","62"],"import React from \"react\";\nimport GeneratePDF from './GeneratePDF'\n\nclass BuyStock extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            stockName: this.props.location.stockName,\n            isLoading: false,\n            companyOverview: {},\n            currentStockPrice: 0,\n            //prevStockPrice: 0,\n            quantity: 0,\n            commission: 5,\n            customer: this.props.location.customer,\n            errorMessage: false,\n            addModalShow : false,\n            open : false,\n            setOpen : false\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.onBuyStock = this.onBuyStock.bind(this);\n        this.updateCustomerID = this.updateCustomerID.bind(this)\n        this.onSellStock = this.onSellStock.bind(this)\n    }\n\n    async onBuyStock(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        let response = await fetch('/trade/book', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': '*/*'\n            },\n            body: JSON.stringify({\n                customerId: this.state.customerID,\n                stockName: this.state.stockName,\n                price: (this.state.currentStockPrice + this.state.commission) * this.state.quantity,\n                side: 'BUY',\n                quantity: this.state.quantity\n            })\n        });\n        let status = response.status;\n\n        if (status == 200) {\n            this.props.history.push({\n                pathname: '/GeneratePDF',\n                trade: await response.json(),\n                open : this.state.open,\n                setOpen : this.state.setOpen,\n                stockName : this.state.stockName,\n                tradingAccount  :this.state.tradingAccount,\n                price : this.state.currentStockPrice,\n                tradingDate : this.state.tradingDate,\n                quantity : this.state.quantity,\n                netAmount  :(this.state.currentStockPrice + this.state.commission) * this.state.quantity\n            })\n\n        } else {\n            this.setState({\n                errorMessage: true\n            })\n        }\n\n\n    }\n\n    async onSellStock(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n\n        let response = await fetch('/trade/book', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': '*/*'\n            },\n            body: JSON.stringify({\n                customerId: this.state.customerID,\n                stockName: this.state.stockName,\n                price: (this.state.currentStockPrice + this.state.commission) * this.state.quantity,\n                side: 'SELL',\n                quantity: this.state.quantity\n            })\n        });\n        let status = response.status;\n        if (status === 200) {\n            console.log(\"Redirecting to generate PDF: \", this.state.stockName);\n            this.props.history.push({\n                pathname: '/GeneratePDF',\n                trade: await response.json()\n            })\n        } else {\n            this.setState({\n                errorMessage: true\n            })\n        }\n    }\n\n    handleChange(event) {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    async callAPIs(event) {\n        this.setState({\n            currentStockPrice: await require('../data_and_config/CurrentDay/' + this.state.stockName + '.json').c,\n            isLoading: true\n        })\n\n        this.setState({\n                companyOverview: await require('../data_and_config/Company_Overview/' + this.state.stockName + '.json'),\n                isLoading: true\n            }\n        )\n\n    }\n\n    async componentDidMount() {\n        this.setState({\n            isLoading: true\n        })\n        if (this.state.stockName === undefined) {\n            this.setState({\n                stockName: JSON.parse(localStorage.getItem('stockName'))\n            }, () => this.callAPIs())\n        } else {\n            localStorage.setItem('stockName', JSON.stringify(this.state.stockName));\n            this.callAPIs()\n        }\n        if (this.state.customer === undefined) {\n            this.setState({\n                customer: JSON.parse(localStorage.getItem('customer'))\n            }, () => this.updateCustomerID())\n        } else {\n            localStorage.setItem('customer', JSON.stringify(this.state.customer));  ///where // maybe because of this, even without logging in, my\n            this.updateCustomerID(); //name is still visible\n        }\n\n    }\n\n    updateCustomerID() {\n        this.setState({\n            customerID: this.state.customer.customerId,\n            tradingAccount: this.state.customer.tradingAccount\n        })\n    }\n\n\n    render() {\n        const date = new Date()\n        const extendedTime = date.getTime() + 2 * 24 * 60 * 60 * 1000;\n        const newDate = new Date(extendedTime);\n        const tradingDate = date.getDate().toString() + \"-\" + date.getMonth().toString() + \"-\" + date.getFullYear().toString()\n        const settlementDate = newDate.getDate().toString() + \"-\" + newDate.getMonth().toString() + \"-\" + newDate.getFullYear().toString()\n        const netAmount = (this.state.currentStockPrice + this.state.commission) * this.state.quantity\n        const ref = React.createRef();\n\n        return (\n            <div className=\"buy-stock-page\">\n                <div className=\"buy-stock-container\">\n                    <div className=\"stock-view-card\">\n                        <div>\n                            <h3 className=\"companyDetails\"> Account number:</h3>\n                            <p className=\"companyDetails\">{this.state.tradingAccount} </p>\n                        </div>\n\n                    </div>\n                </div>\n                <div className=\"buy-stock-container\">\n                    <div className=\"stock-view-card\">\n                        <div ref={ref}>\n                            <div>\n                                {/*<h3>Hello {this.state.customerID}</h3>*/}\n                                <h3 className=\"companyDetails\"> Stock Name:</h3>\n                                <p className=\"companyDetails\"> {this.state.stockName} </p>\n                            </div>\n                            <div>\n                                <h3 className=\"companyDetails\"> Price :</h3>\n                                <p className=\"companyDetails\">{this.state.currentStockPrice}</p>\n                            </div>\n                            <div>\n                                <h3 className=\"companyDetails\"> Trading Date:</h3>\n                                <p className=\"companyDetails\">{tradingDate}</p>\n                            </div>\n                            <div>\n                                <h3 className=\"companyDetails\"> Settlement Date:</h3>\n                                <p className=\"companyDetails\">{settlementDate}</p>\n                            </div>\n                            <div>\n                                <h3 className=\"companyDetails\"> Quantity:</h3>\n                                <input\n                                    className=\"companyDetails\"\n                                    type=\"number\" name=\"quantity\"\n                                    defaultValue={0}\n                                    min={0}\n                                    onChange={this.handleChange}\n                                    style={{blockSize: \"1%\", width: \"10%\"}}\n                                />\n                            </div>\n                            <div>\n                                <h3 className=\"companyDetails\">Commission:</h3>\n                                <p className=\"companyDetails\">${this.state.commission} per share</p>\n                            </div>\n                            <div>\n                                <h3 className=\"companyDetails\">Net Amount: </h3>\n                                <p className=\"companyDetails\">${netAmount}</p>\n                            </div>\n                        </div>\n                        <div>\n\n                                <button name=\"buy2\" onClick={this.onBuyStock}>BUY STOCK</button>\n                        </div>\n                        <div>\n                            <button name=\"sell\" onClick={this.onSellStock}>SELL STOCK</button>\n                        </div>\n                        <h3 style={{display: this.state.errorMessage ? \"block\" : \"none\"}}>Not Enough Stocks!</h3>\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nexport default BuyStock\n","/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/ExtendedStockView.js",["63"],"import React, {Component} from \"react\";\nimport {Chart} from \"react-chartjs-2\";\nimport {Link} from \"react-router-dom\";\n\nclass ExtendedStockView extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            stockName: this.props.location.stockName,\n            isLoading: false,\n            numberOfDays: 30,\n            companyReportQueryType: \"netIncome\",\n            companyOverview: {},\n            currentStockPrice: 0,\n            prevStockPrice: 0,\n            priceDiff: 0,\n            stockTrendChart: undefined,\n            companyReportChart: undefined\n        }\n        this.handleClickStockTrend = this.handleClickStockTrend.bind(this)\n        this.handleClickCompanyReport = this.handleClickCompanyReport.bind(this)\n        this.showChart = this.showChart.bind(this)\n        this.showStockChart = this.showStockChart.bind(this)\n        this.showComparyReportChart = this.showComparyReportChart.bind(this)\n        this.handleClick = this.handleClick.bind(this)\n        this.logout = this.logout.bind(this);\n    }\n\n    async componentDidMount() {\n        this.setState({\n            isLoading: true\n        })\n\n        if (localStorage.getItem('prevStockPrice') === null) {\n            this.setState({\n                prevStockPrice: this.state.currentStockPrice\n            })\n        } else {\n            this.setState({\n                prevStockPrice: JSON.parse(localStorage.getItem('prevStockPrice'))\n            })\n        }\n\n        if (this.state.stockName === undefined) {\n            if (localStorage.getItem('customer') === null) {\n                this.props.history.push({\n                    pathname: '/Error404',\n                    message: 'Backend server is down'\n                });\n            }\n\n            this.setState({\n                stockName: JSON.parse(localStorage.getItem('stockName'))\n            }, () => this.showChart())\n        } else {\n            localStorage.setItem('stockName', JSON.stringify(this.state.stockName));\n            this.showChart()\n        }\n\n    }\n\n    async showChart() {\n\n        this.setState({\n            companyOverview: await require('../data_and_config/Company_Overview/' + this.state.stockName + '.json'),\n            isLoading: false\n        })\n\n        this.setState({\n            currentStockPrice: await require('../data_and_config/CurrentDay/' + this.state.stockName + '.json').c,\n            isLoading: false\n        })\n\n        this.showStockChart();\n        this.showComparyReportChart();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (this.state.currentStockPrice !== this.state.prevStockPrice) {\n            localStorage.setItem('prevStockPrice', JSON.stringify(this.state.currentStockPrice));\n        }\n    }\n\n    async showComparyReportChart() {\n        this.setState({\n                companyReportApiOutput: await require('../data_and_config/Income_Statement/' + this.state.stockName + '.json'),\n                isLoading: false\n            }\n        )\n\n        console.log(this.state.companyReportApiOutput)\n        let annualReports = this.state.companyReportApiOutput.annualReports;\n        let label = []\n        let yAxisData = []\n        for (let index in annualReports) {\n            label.push(annualReports[index].fiscalDateEnding)\n            yAxisData.push(annualReports[index][this.state.companyReportQueryType])\n        }\n        yAxisData.reverse();\n\n        let ctx = document.getElementById(this.state.stockName + \"company_report\").getContext('2d');\n        let oldChart = this.state.companyReportChart;\n        if (oldChart !== undefined) {\n            oldChart.destroy()\n        }\n\n        let currChart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: label,\n                datasets: [\n                    {\n                        label: this.state.companyReportQueryType,\n                        borderColor: 'rgb(226,122,17)',\n                        data: yAxisData\n                    }\n                ],\n            },\n            options: {\n                legend: {\n                    labels: {\n                        fontColor: 'rgb(255,255,255)',\n                    }\n                },\n                title: {\n                    display: true,\n                    fontColor: 'rgb(255,255,255)',\n                    fontSize: 26,\n                    text: this.state.companyOverview.Name + \" Company Report\",\n                },\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            fontColor: 'rgb(255,255,255)',\n                            fontSize: 16,\n                        },\n                    }],\n                    xAxes: [{\n                        ticks: {\n                            fontColor: 'rgb(255,255,255)',\n                            fontSize: 16,\n                        },\n                    }]\n                }\n\n            }\n        });\n\n        this.setState({\n            companyReportChart: currChart\n        })\n\n    }\n\n    async showStockChart() {\n        this.setState({\n                stockPriceApiOutput: await require('../data_and_config/TS_Daily/' + this.state.stockName + '.json'),\n                isLoading: false\n            }\n        )\n\n        Date.prototype.yyyymmdd = function () {\n            let mm = this.getMonth() + 1; // getMonth() is zero-based\n            let dd = this.getDate();\n\n            return [this.getFullYear(), '-',\n                (mm > 9 ? '' : '0') + mm, '-',\n                (dd > 9 ? '' : '0') + dd\n            ].join('');\n        };\n\n        let numberOfDays = this.state.numberOfDays\n        let open = []\n        let close = []\n        let label = []\n        let startDate = Date.parse(this.state.stockPriceApiOutput[\"Meta Data\"][\"3. Last Refreshed\"]) - numberOfDays * 86400000\n\n        for (let i = 0; i <= numberOfDays; i++) {\n            let curr = new Date(startDate + (i * 86400000))\n            let timeSeries = this.state.stockPriceApiOutput[\"Time Series (Daily)\"]\n            if (timeSeries.hasOwnProperty(curr.yyyymmdd())) {\n                open.push(timeSeries[curr.yyyymmdd()][\"1. open\"])\n                close.push(timeSeries[curr.yyyymmdd()][\"4. close\"])\n                label.push(curr.yyyymmdd())\n            }\n        }\n\n        let ctx = document.getElementById(this.state.stockName + \"stock_trend\").getContext('2d');\n        let oldChart = this.state.stockTrendChart;\n        if (oldChart !== undefined) {\n            oldChart.destroy()\n        }\n\n        let currChart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: label,\n                datasets: [\n                    {\n                        label: \"OPEN\",\n                        borderColor: 'rgb(226,122,17)',\n                        data: open\n                    },\n                    {\n                        label: \"CLOSE\",\n                        borderColor: 'rgb(237,9,59)',\n                        data: close\n                    }\n                ],\n            },\n            options: {\n                legend: {\n                    labels: {\n                        fontColor: 'rgb(255,255,255)',\n                    }\n                },\n                title: {\n                    display: true,\n                    fontColor: 'rgb(255,255,255)',\n                    fontSize: 26,\n                    text: this.state.companyOverview.Name + \" Stock Trend\",\n                },\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            fontColor: 'rgb(255,255,255)',\n                            fontSize: 16,\n                        },\n                    }],\n                    xAxes: [{\n                        ticks: {\n                            fontColor: 'rgb(255,255,255)',\n                            fontSize: 16,\n                        },\n                    }]\n                }\n\n            }\n        });\n\n\n        this.setState({\n            stockTrendChart: currChart\n        })\n    }\n\n    handleClick(event) {\n        console.log(\"Clicked\")\n    }\n\n    handleClickStockTrend(event) {\n        const id = event.target.id\n        this.setState({\n            numberOfDays: id\n        }, () => this.showStockChart())\n    }\n\n    handleClickCompanyReport(event) {\n        const id = event.target.id\n        this.setState({\n            companyReportQueryType: id\n        }, () => this.showComparyReportChart())\n    }\n\n    logout() {\n        localStorage.removeItem('customer');\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"NAV\">\n                    <nav>\n                        <input type=\"checkbox\" id=\"check\"/>\n                        <label htmlFor=\"check\" className=\"checkBtn\">\n                            <i className=\"fas fa-bars\"/>\n                        </label>\n                        <label className=\"logo\">EStock</label>\n                        <ul>\n                            <li><Link to=\"/Dashboard\">Home</Link></li>\n                            <li><Link to=\"/SignIn\">About</Link></li>\n                            <li><Link to=\"/SignIn\">Services</Link></li>\n                            <li><Link to=\"/SignIn\">Contact</Link></li>\n                            <li><Link to=\"/\" onClick={this.logout}>Logout</Link></li>\n                        </ul>\n                    </nav>\n                </div>\n                <div className=\"ExtendedStockView\">\n                    <div className=\"container\">\n                        <div className=\"item\">\n                            <div className=\"daysQuery\">\n                                <div className=\"queryType\" onClick={this.handleClickStockTrend} id=\"5\">5 Days</div>\n                                <div className=\"queryType\" onClick={this.handleClickStockTrend} id=\"10\">10 Days</div>\n                                <div className=\"queryType\" onClick={this.handleClickStockTrend} id=\"30\">1 Month</div>\n                                <div className=\"queryType\" onClick={this.handleClickStockTrend} id=\"180\">6 Months</div>\n                                <div className=\"queryType\" onClick={this.handleClickStockTrend} id=\"365\">1 Year</div>\n                                <div className=\"queryType\" onClick={this.handleClickStockTrend} id=\"1825\">5 Years</div>\n                            </div>\n                            <div style={{display: this.state.isLoading ? \"none\" : \"block\"}}>\n                                <canvas\n                                    id={this.state.stockName + \"stock_trend\"}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"item\">\n                            <div className=\"daysQuery\">\n                                <div className=\"queryType\" onClick={this.handleClickCompanyReport}\n                                     id=\"totalRevenue\">Total\n                                    Revenue\n                                </div>\n                                <div className=\"queryType\" onClick={this.handleClickCompanyReport}\n                                     id=\"grossProfit\">Gross\n                                    Profit\n                                </div>\n                                <div className=\"queryType\" onClick={this.handleClickCompanyReport} id=\"netIncome\">Net\n                                    Income\n                                </div>\n                            </div>\n                            <div style={{display: this.state.isLoading ? \"none\" : \"block\"}}>\n                                <canvas\n                                    id={this.state.stockName + \"company_report\"}\n                                />\n                            </div>\n                        </div>\n                        <div className=\"item\">\n                            <div>\n                                <h5 className=\"companyDetails\">Name: </h5>\n                                <p className=\"companyDetails\">{this.state.companyOverview.Name}</p>\n                            </div>\n                            <div>\n                                <h5 className=\"companyDetails\">Asset Type: </h5>\n                                <p className=\"companyDetails\">{this.state.companyOverview.AssetType}</p>\n                            </div>\n                            <div>\n                                <h5 className=\"companyDetails\">Stock Exchange: </h5>\n                                <p className=\"companyDetails\">{this.state.companyOverview.Exchange}</p>\n                            </div>\n                            <div>\n                                <h5 className=\"companyDetails\">Currency: </h5>\n                                <p className=\"companyDetails\">{this.state.companyOverview.Currency}</p>\n                            </div>\n                            <div>\n                                <h5 className=\"companyDetails\">Industry: </h5>\n                                <p className=\"companyDetails\">{this.state.companyOverview.Industry}</p>\n                            </div>\n                            <div>\n                                <h5 className=\"companyDetails\">Country: </h5>\n                                <p className=\"companyDetails\">{this.state.companyOverview.Country}</p>\n                            </div>\n                            <div>\n                                <h5 className=\"companyDetails\">Current Stock Price: </h5>\n                                <p\n                                    className=\"companyDetails\"\n                                    style={{color: this.state.prevStockPrice === 0 || this.state.currentStockPrice - this.state.prevStockPrice > 0 ? \"green\" : \"red\"}}\n                                >\n                                    {this.state.currentStockPrice}\n                                </p>\n                                <p\n                                    className=\"companyDetails\"\n                                    style={{\n                                        display: this.state.currentStockPrice - this.state.prevStockPrice > 0 ? \"inline-block\" : \"none\",\n                                        fontSize: \"45px\",\n                                        color: \"green\"\n                                    }}\n                                >\n                                    &nbsp; &nbsp; &uarr;\n                                </p>\n                                <p\n                                    className=\"companyDetails\"\n                                    style={{\n                                        display: this.state.currentStockPrice - this.state.prevStockPrice < 0 ? \"inline-block\" : \"none\",\n                                        fontSize: \"45px\",\n                                        color: \"red\"\n                                    }}\n                                >\n                                    &nbsp; &nbsp; &darr;\n                                </p>\n                            </div>\n                            <button onClick={this.handleClick} className=\"buyStock\">Buy Stock</button>\n                        </div>\n<<<<<<< HEAD\n=======\n                        <div style={{display: this.state.isLoading ? \"none\" : \"block\"}}>\n                            <canvas\n                                id={this.state.stockName + \"company_report\"}\n                            />\n                        </div>\n                    </div>\n                    <div className=\"item\">\n                        <div>\n                            <h5 className=\"companyDetails\">Name: </h5>\n                            <p className=\"companyDetails\">{this.state.companyOverview.Name}</p>\n                        </div>\n                        <div>\n                            <h5 className=\"companyDetails\">Asset Type: </h5>\n                            <p className=\"companyDetails\">{this.state.companyOverview.AssetType}</p>\n                        </div>\n                        <div>\n                            <h5 className=\"companyDetails\">Stock Exchange: </h5>\n                            <p className=\"companyDetails\">{this.state.companyOverview.Exchange}</p>\n                        </div>\n                        <div>\n                            <h5 className=\"companyDetails\">Currency: </h5>\n                            <p className=\"companyDetails\">{this.state.companyOverview.Currency}</p>\n                        </div>\n                        <div>\n                            <h5 className=\"companyDetails\">Industry: </h5>\n                            <p className=\"companyDetails\">{this.state.companyOverview.Industry}</p>\n                        </div>\n                        <div>\n                            <h5 className=\"companyDetails\">Country: </h5>\n                            <p className=\"companyDetails\">{this.state.companyOverview.Country}</p>\n                        </div>\n                        <div>\n                            <h5 className=\"companyDetails\">Current Stock Price: </h5>\n                            <p\n                                className=\"companyDetails\"\n                                style={{color: this.state.prevStockPrice === 0 || this.state.currentStockPrice - this.state.prevStockPrice > 0 ? \"green\" : \"red\"}}\n                            >\n                                {this.state.currentStockPrice}\n                            </p>\n                            <p\n                                className=\"companyDetails\"\n                                style={{\n                                    display: this.state.currentStockPrice - this.state.prevStockPrice > 0 ? \"inline-block\" : \"none\",\n                                    fontSize: \"45px\",\n                                    color: \"green\"\n                                }}\n                            >\n                                &nbsp; &nbsp; &uarr;\n                            </p>\n                            <p\n                                className=\"companyDetails\"\n                                style={{\n                                    display: this.state.currentStockPrice - this.state.prevStockPrice < 0 ? \"inline-block\" : \"none\",\n                                    fontSize: \"45px\",\n                                    color: \"red\"\n                                }}\n                            >\n                                &nbsp; &nbsp; &darr;\n                            </p>\n                        </div>\n                        <Link to={{\n                            pathname: \"/BuyStock\",\n                            stockName: this.state.stockName\n                        }}>\n\n                              <button className=\"buyStock\">Buy Stock</button>\n                        </Link>\n>>>>>>> linked ExtendedStockView.js with BuyStock\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ExtendedStockView","/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/GenerateGraph.js",["64"],"/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/GenerateView.js",[],"/home/vinayak/IdeaProjects/EStock/user-interface-service/src/main/webapp/estock-ui/src/component/GeneratePDF.js",["65"],"import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport {Document, Link, Page, PDFDownloadLink, StyleSheet, Text, View} from \"@react-pdf/renderer\";\n\nconst styles = StyleSheet.create({\n    title: {\n        margin: 20,\n        fontSize: 25,\n        textAlign: 'center',\n        backgroundColor: '#e4e4e4',\n        textTransform: 'uppercase'\n    },\n    body: {\n        flexGrow: 1,\n    },\n    row: {\n        flexGrow: 1,\n        flexDirection: 'row',\n    },\n    block: {\n        flexGrow: 1,\n    },\n    text: {\n        width: '60%',\n        margin: 10,\n        textAlign: 'justify',\n    },\n    textItalic: {\n        width: '60%',\n        margin: 10\n    },\n    fill1: {\n        width: '40%',\n        backgroundColor: '#e14427',\n    },\n    fill2: {\n        flexGrow: 2,\n        backgroundColor: '#e6672d',\n    },\n    fill3: {\n        flexGrow: 2,\n        backgroundColor: '#e78632',\n    },\n    fill4: {\n        flexGrow: 2,\n        backgroundColor: '#e29e37',\n    },\n});\n\nclass GeneratePDF extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state={\n            open : false,\n            setOpen  :false,\n            stockName : this.props.location.stockName,\n            tradingAccount  :this.props.location.tradingAccount,\n            price : this.props.location.price,\n            tradingDate : this.props.location.tradingDate,\n            quantity : this.props.location.quantity,\n            netAmount  :this.props.location.netAmount\n        }\n\n        this.handleClose = this.handleClose.bind(this)\n    }\n\n    handleClose(){\n        this.props.history.push({\n            pathname : \"/Dashboard\"\n        })\n    }\n\n    MyDocument(stockName, tradingAccount, price, tradingDate, quantity, netAmount){\n        return <Document>\n            <Page size=\"A4\">\n                <View style={styles.body}>\n                    <View style={styles.row}>\n                        <Text style={styles.text}>\n                            StockName : {stockName} {\"\\n\"}\n                            Trading Account : {tradingAccount} {\"\\n\"}\n                            Price : {price} {\"\\n\"}\n                            Trading Date : {tradingDate} {\"\\n\"}\n                            Quantity : {quantity} {\"\\n\"}\n                            Net Amount : {netAmount} {\"\\n\"}\n                        </Text>\n                    </View>\n                </View>\n            </Page>\n        </Document>\n    }\n\n    render() {\n        const date = new Date()\n        const tradingDate = date.getDate().toString() + \"-\" + date.getMonth().toString() + \"-\" + date.getFullYear().toString()\n        return (\n\n            <div>\n                <Dialog\n                    open={true}\n                    keepMounted\n                    onClose={this.handleClose}\n                    aria-labelledby=\"alert-dialog-slide-title\"\n                    aria-describedby=\"alert-dialog-slide-description\"\n                >\n                    <DialogTitle id=\"alert-dialog-slide-title\">{\"Stocks have been purchased!\"}</DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id=\"alert-dialog-slide-description\">\n                            The purchase has been completed. Kindly click on the link to download the invoice!\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <PDFDownloadLink document={this.MyDocument(this.state.stockName,\n                            this.state.tradingAccount, this.state.price, tradingDate, this.state.quantity, this.state.netAmount)} fileName=\"Invoice.pdf\">\n                            {({ blob, url, loading, error }) => (loading ? 'Loading document...' : 'Download now!')}\n                        </PDFDownloadLink>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Back To DashBoard\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        )\n\n    }\n}\n\nexport default GeneratePDF\n",{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":2,"column":8,"nodeType":"72","messageId":"73","endLine":2,"endColumn":11},{"ruleId":"74","severity":1,"message":"75","line":44,"column":18,"nodeType":"76","messageId":"77","endLine":44,"endColumn":20},{"ruleId":"74","severity":1,"message":"75","line":79,"column":18,"nodeType":"76","messageId":"77","endLine":79,"endColumn":20},{"ruleId":"78","severity":1,"message":"79","line":163,"column":9,"nodeType":"80","messageId":"77","endLine":171,"endColumn":10},{"ruleId":"78","severity":1,"message":"79","line":31,"column":9,"nodeType":"80","messageId":"77","endLine":42,"endColumn":10},{"ruleId":"70","severity":1,"message":"81","line":8,"column":19,"nodeType":"72","messageId":"73","endLine":8,"endColumn":23},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"no-unused-vars","'Pdf' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-extend-native","Date prototype is read only, properties should not be added.","AssignmentExpression","'Link' is defined but never used.","no-global-assign","no-unsafe-negation"]